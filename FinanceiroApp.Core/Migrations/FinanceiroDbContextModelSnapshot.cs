// <auto-generated />
using System;
using FinanceiroApp.Core.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FinanceiroApp.Core.Migrations
{
    [DbContext(typeof(FinanceiroDbContext))]
    partial class FinanceiroDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.0");

            modelBuilder.Entity("FinanceiroApp.Core.Entities.Bank", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Banks");
                });

            modelBuilder.Entity("FinanceiroApp.Core.Entities.BankAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Agency")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Balance")
                        .HasColumnType("TEXT");

                    b.Property<int>("BankId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("BankId");

                    b.ToTable("BankAccounts");
                });

            modelBuilder.Entity("FinanceiroApp.Core.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Nature")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("PlannedAmount")
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("FinanceiroApp.Core.Entities.DescriptionMapping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Pattern")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("DescriptionMappings");
                });

            modelBuilder.Entity("FinanceiroApp.Core.Entities.FinancialGoal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("CurrentAmount")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("TargetAmount")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("TargetDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("FinancialGoals");
                });

            modelBuilder.Entity("FinanceiroApp.Core.Entities.ScheduledTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Amount")
                        .HasColumnType("TEXT");

                    b.Property<int>("BankAccountId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsProcessed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsRecurring")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("LastProcessedDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("NextDueDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("RecurrenceEndDate")
                        .HasColumnType("TEXT");

                    b.Property<int?>("RecurrenceFrequency")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RecurrenceType")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("BankAccountId");

                    b.HasIndex("CategoryId");

                    b.ToTable("ScheduledTransactions");
                });

            modelBuilder.Entity("FinanceiroApp.Core.Entities.Transaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("BankAccountId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("DestinationBankAccountId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ImportDateTime")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsRecurring")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsTransfer")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ParentTransactionId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("RecurrenceEndDate")
                        .HasColumnType("TEXT");

                    b.Property<int?>("RecurrenceFrequency")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RecurrenceType")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("RegistrationDateTime")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("TransactionDateTime")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("BankAccountId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("DestinationBankAccountId");

                    b.HasIndex("ParentTransactionId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("FinanceiroApp.Core.Entities.BankAccount", b =>
                {
                    b.HasOne("FinanceiroApp.Core.Entities.Bank", "Bank")
                        .WithMany("BankAccounts")
                        .HasForeignKey("BankId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bank");
                });

            modelBuilder.Entity("FinanceiroApp.Core.Entities.DescriptionMapping", b =>
                {
                    b.HasOne("FinanceiroApp.Core.Entities.Category", "Category")
                        .WithMany("DescriptionMappings")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("FinanceiroApp.Core.Entities.ScheduledTransaction", b =>
                {
                    b.HasOne("FinanceiroApp.Core.Entities.BankAccount", "BankAccount")
                        .WithMany()
                        .HasForeignKey("BankAccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FinanceiroApp.Core.Entities.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("BankAccount");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("FinanceiroApp.Core.Entities.Transaction", b =>
                {
                    b.HasOne("FinanceiroApp.Core.Entities.BankAccount", "BankAccount")
                        .WithMany("Transactions")
                        .HasForeignKey("BankAccountId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FinanceiroApp.Core.Entities.Category", "Category")
                        .WithMany("Transactions")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("FinanceiroApp.Core.Entities.BankAccount", "DestinationBankAccount")
                        .WithMany("DestinationTransactions")
                        .HasForeignKey("DestinationBankAccountId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FinanceiroApp.Core.Entities.Transaction", "ParentTransaction")
                        .WithMany()
                        .HasForeignKey("ParentTransactionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("BankAccount");

                    b.Navigation("Category");

                    b.Navigation("DestinationBankAccount");

                    b.Navigation("ParentTransaction");
                });

            modelBuilder.Entity("FinanceiroApp.Core.Entities.Bank", b =>
                {
                    b.Navigation("BankAccounts");
                });

            modelBuilder.Entity("FinanceiroApp.Core.Entities.BankAccount", b =>
                {
                    b.Navigation("DestinationTransactions");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("FinanceiroApp.Core.Entities.Category", b =>
                {
                    b.Navigation("DescriptionMappings");

                    b.Navigation("Transactions");
                });
#pragma warning restore 612, 618
        }
    }
}
